import { readFile, writeFile } from 'node:fs/promises'
import path from 'path'

const generatedFile = path.join(process.cwd(), 'src/schema.ts')
const outputFile = path.join(process.cwd(), 'src/types.ts')

async function postgenerate() {
    const dbTypes = await readFile(generatedFile, 'utf-8')
    const regex = /export\s+type\s+(\w+)\s*=/g
    const excludedTypeNames = ['DB', 'Timestamp', 'Generated']
    const typeNames = []
    let match

    while ((match = regex.exec(dbTypes)) !== null) {
        const typeName = match[1]
        if (!excludedTypeNames.includes(typeName)) {
            typeNames.push(typeName)
        }
    }

    let output = `// Generated by prisma/postgenerate.ts

import type { Insertable, Selectable, Updateable } from 'kysely'
import type { ${typeNames.map((name) => `${name} as DB${name}`)} } from './schema'
    `

    typeNames.map((name) => {
        const type = `export type ${name} = Selectable<DB${name}>`
        const newType = `export type New${name} = Insertable<DB${name}>`
        const updateType = `export type Update${name} = Updateable<DB${name}>`

        output += `
${type}
${newType}
${updateType}
        `
    })

    await writeFile(outputFile, output, 'utf-8')
    return
}
postgenerate()
    .then(() => {
        console.log('âœ” Generated Selectabele, Insertable and Updateable types to ./src/types.ts')
    })
    .catch((err) => {
        console.error(err)
        process.exit(1)
    })
